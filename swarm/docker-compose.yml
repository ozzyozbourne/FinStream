services:
  # Kafka Broker
  broker:
    image: apache/kafka:latest
    container_name: broker
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: INTERNAL://0.0.0.0:9092,EXTERNAL://0.0.0.0:9093,CONTROLLER://localhost:9094
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://broker:9092,EXTERNAL://localhost:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3
    ports:
      - "9092:9092"
      - "9093:9093"
    volumes:
      - kafka-data:/opt/kafka/data
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "./opt/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 > /dev/null 2>&1",
        ]
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - app-network

  # Kafka UI
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kui
    environment:
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: broker:9092
      KAFKA_CLUSTERS_0_NAME: local-kafka-cluster
    ports:
      - "8084:8080"
    depends_on:
      - broker
    networks:
      - app-network

  # PostgreSQL Database
  postgres:
    image: ghcr.io/dbsystel/postgresql-partman@sha256:87ab5b74dba2cbbfa17433d49f44242be7ea61cf0ab2ec639a94a64e9bd9bcad
    hostname: postgreshost
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - ${POSTGRES_PORT}:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # pgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    env_file:
      - .env
    environment:
      - PGADMIN_DEFAULT_EMAIL=${PGADMIN_DEFAULT_EMAIL}
      - PGADMIN_DEFAULT_PASSWORD=${PGADMIN_DEFAULT_PASSWORD}
      - POSTGRES_HOST=postgreshost
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - PGADMIN_CONFIG_SERVER_MODE=False
      - PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED=False
    ports:
      - ${PGADMIN_PORT}:80
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

  # Redis
  redis:
    image: redis:latest  
    container_name: my-redis
    restart: unless-stopped
    ports:
      - "6379:6379"  
    volumes:
      - redis-data:/data  
    command: redis-server --appendonly yes --requirepass myStrongPassword
    environment:
      - TZ=UTC  
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RedisInsight
  redisinsight:
    image: redis/redisinsight:latest
    container_name: redisinsight
    restart: unless-stopped
    ports:
      - "5540:5540"
    volumes:
      - redisinsight-data:/data
    networks:
      - app-network
    depends_on:
      - redis

  # LGTM (Grafana OTEL Stack)
  lgtm:
    image: docker.io/grafana/otel-lgtm:latest  
    container_name: lgtm
    ports:
      - "3000:3000"
      - "4317:4317"
      - "4318:4318"
    volumes:
      - ./container/grafana:/data/grafana
      - ./container/prometheus:/data/prometheus
      - ./container/loki:/data/loki
    environment:
      - GF_PATHS_DATA=/data/grafana
    env_file:
      - .env
    stdin_open: true
    tty: true
    networks:
      - app-network

volumes:
  kafka-data:
    driver: local
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  redis-data:
    driver: local
  redisinsight-data:
    driver: local

networks:
  app-network:
    driver: bridge
